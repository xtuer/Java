plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

////////////////////////////////////////////////////////////////////////////////
//                                [1] [2] 运行、打包                           //
////////////////////////////////////////////////////////////////////////////////
// [1.1] 从命令行运行默认类: gradle run
// [1.2] 从命令行运行某个类: gradle run -DmainClass=Foo
ext {
    project.mainClassName = System.getProperty("mainClass", "DefaultMainClass")
}

// [2] 打包: gradle clean shadowJar [-DmainClass=Foo]
shadowJar {
    mergeServiceFiles('META-INF/spring.*')
    archiveName = 'app.jar' // 输出的 jar 包名字
}

////////////////////////////////////////////////////////////////////////////////
//                                 [3] Maven 依赖                             //
////////////////////////////////////////////////////////////////////////////////
repositories {
    mavenCentral()
}

ext.versions = [
        spring : '5.0.2.RELEASE',
        lombok : '1.16.20',
        logback: '1.3.0-alpha4',
        slf4j  : '1.7.25',
        junit  : '4.12',
        elasticsearch : '3.1.10.RELEASE'
]

dependencies {
    compile(
            "org.springframework:spring-context-support:${versions.spring}",
            "org.springframework.data:spring-data-elasticsearch:${versions.elasticsearch}",
    )

    // Log dependencies
    compile(
            "ch.qos.logback:logback-classic:${versions.logback}", // slf4j-logback 绑定
            "org.slf4j:jcl-over-slf4j:${versions.slf4j}",         // redirect apache commons logging
            "org.slf4j:jul-to-slf4j:${versions.slf4j}",           // redirect jdk util logging
            "org.slf4j:log4j-over-slf4j:${versions.slf4j}",       // redirect log4j
    )

    testCompile "junit:junit:${versions.junit}"
    testCompile "org.springframework:spring-test:${versions.spring}"
    compileOnly "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
}

////////////////////////////////////////////////////////////////////////////////
//                                    JVM                                     //
////////////////////////////////////////////////////////////////////////////////
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}
