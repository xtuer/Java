<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 必须是接口 Mapper 的全路径 -->
<mapper namespace="com.xtuer.mapper.OrderMapper">
    <!-- 订单全部的列 -->
    <sql id="orderFullColumns">
        o.order_id, o.order_sn, o.customer_company, o.customer_contact, o.customer_address,
        o.order_date, o.delivery_date, o.salesperson_id, o.calibrated, o.calibration_info,
        o.requirement, o.state, o.attachment_id, o.product_codes, o.created_at,

        oi.order_item_id, oi.count, oi.comment,

        p.product_id AS product_id, p.name AS product_name, p.code AS product_code, p.model AS product_model,

        user.user_id AS salesperson_id, user.nickname AS salesperson_nickname
    </sql>

    <!-- 查询指定 ID 的订单 -->
    <select id="findOrderById" resultMap="orderMap">
        SELECT <include refid="orderFullColumns"/>
        FROM `order` o
            LEFT JOIN order_item oi ON o.order_id = oi.order_id
            LEFT JOIN product p ON p.product_id = oi.product_id
            LEFT JOIN user ON user.user_id = o.salesperson_id
        WHERE o.order_id = #{orderId}
    </select>

    <!-- 查询符合条件的订单 -->
    <select id="findOrders" resultMap="orderMap">
        SELECT <include refid="orderFullColumns"/>
        FROM `order` o
            JOIN (
                SELECT order_id FROM `order`
                <where>
                    <if test="filter.orderSn!=null and filter.orderSn!='' ">
                        AND order_sn LIKE CONCAT('%', #{filter.orderSn},'%')
                    </if>
                    <if test="filter.productCodes!=null and filter.productCodes!='' ">
                        AND product_codes LIKE CONCAT('%', #{filter.productCodes},'%')
                    </if>
                    <if test="filter.state >= 0">
                        AND state = #{filter.state}
                    </if>
                </where>
                ORDER BY created_at DESC
                LIMIT ${page.offset}, ${page.count}
            ) t ON t.order_id = o.order_id
            LEFT JOIN order_item oi ON o.order_id = oi.order_id
            LEFT JOIN product p ON p.product_id = oi.product_id
            LEFT JOIN user ON user.user_id = o.salesperson_id
        ORDER BY o.created_at DESC
    </select>

    <!-- 插入或者更新订单 -->
    <update id="upsertOrder">
        INSERT INTO `order` (order_id, order_sn, customer_company, customer_contact, customer_address,
            order_date, delivery_date, salesperson_id, calibrated, calibration_info,
            requirement, attachment_id, product_codes, state)
        VALUES (#{orderId}, #{orderSn}, #{customerCompany}, #{customerContact}, #{customerAddress},
            #{orderDate}, #{deliveryDate}, #{salespersonId}, #{calibrated}, #{calibrationInfo},
            #{requirement}, #{attachmentId}, #{productCodes}, #{state})

        ON DUPLICATE KEY
        UPDATE customer_company = #{customerCompany}, customer_contact = #{customerContact}, customer_address = #{customerAddress},
            order_date = #{orderDate}, delivery_date = #{deliveryDate}, calibrated = #{calibrated},
            calibration_info = #{calibrationInfo}, requirement = #{requirement},
            attachment_id = #{attachmentId}, product_codes = #{productCodes}
    </update>

    <!-- 插入订单项 -->
    <insert id="insertOrderItems">
        INSERT INTO order_item (order_id, order_item_id, product_id, count, comment)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.orderId}, #{item.orderItemId}, #{item.productId}, #{item.count}, #{item.comment})
        </foreach>
    </insert>

    <!-- 删除订单的订单项 -->
    <delete id="deleteOrderItems">
        DELETE FROM order_item WHERE order_id = #{orderId}
    </delete>

    <!-- 订单的结果映射 -->
    <resultMap id="orderMap" type="Order">
        <id property="orderId"             column="order_id"/>
        <result property="orderSn"         column="order_sn"/>
        <result property="customerCompany" column="customer_company"/>
        <result property="customerContact" column="customer_contact"/>
        <result property="customerAddress" column="customer_address"/>
        <result property="orderDate"       column="order_date"/>
        <result property="deliveryDate"    column="delivery_date"/>
        <result property="salespersonId"   column="salesperson_id"/>
        <result property="calibrated"      column="calibrated"/>
        <result property="calibrationInfo" column="calibration_info"/>
        <result property="requirement"     column="requirement"/>
        <result property="attachmentId"    column="attachment_id"/>
        <result property="state"           column="state"/>
        <result property="productCodes"    column="product_codes"/>
        <result property="createdAt"       column="created_at"/>

        <association property="salesperson" resultMap="salespersonMap"/>
        <collection property="items" ofType="OrderItem" resultMap="orderItemMap"/>
    </resultMap>

    <!-- 订单项的结果映射 -->
    <resultMap id="orderItemMap" type="OrderItem">
        <id property="orderItemId"   column="order_item_id"/>
        <result property="orderId"   column="order_id"/>
        <result property="productId" column="product_id"/>
        <result property="count"     column="count"/>
        <result property="comment"   column="comment"/>

        <association property="product" resultMap="com.xtuer.mapper.ProductMapper.productMap"/>
    </resultMap>

    <!-- 销售员的结果映射 -->
    <resultMap id="salespersonMap" type="User">
        <id property="userId"       column="salesperson_id"/>
        <result property="nickname" column="salesperson_nickname"/>
    </resultMap>
</mapper>
