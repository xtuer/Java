import org.apache.tools.ant.filters.ReplaceTokens

group 'com.xtuer'
version '1.0'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:1.2.4'
    }
}

gretty {
    port = 80
    contextPath = '/'
    servletContainer = 'tomcat7'

    managedClassReload      = true
    recompileOnSourceChange = false
}

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

////////////////////////////////////////////////////////////////////////////////
//                                   Maven 依赖                               //
////////////////////////////////////////////////////////////////////////////////
repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    springVersion = "4.1.1.RELEASE"
    springSecurityVersion = "3.2.9.RELEASE"
    servletVersion = "3.1.0"
    jstlVersion = "1.2"
    freemarkerVersion = "2.3.20"
    jacksonVersion = "2.5.3"
    logbackVersion = "1.1.2"
    jclOverSlfVersion = "1.7.7"
    mysqlVersion = "5.1.21"
    mybatisVersion = "3.2.1"
    mybatisSpringVersion = "1.2.2"
    dbcpVersion = "1.4"
}

dependencies {
    compile(
            "javax.servlet:jstl:$jstlVersion",                              // JSTL
            "org.springframework:spring-webmvc:$springVersion",             // Spring MVC
            "org.springframework:spring-context-support:$springVersion",
            "org.springframework.security:spring-security-web:$springSecurityVersion", // Spring Security
            "org.springframework.security:spring-security-config:$springSecurityVersion",
            "org.freemarker:freemarker:$freemarkerVersion",                 // Freemarker
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",  // JSON
            "ch.qos.logback:logback-classic:$logbackVersion",               // Logback
            "org.slf4j:jcl-over-slf4j:$jclOverSlfVersion",
            "mysql:mysql-connector-java:$mysqlVersion",                     // MyBatis
            "org.springframework:spring-jdbc:$springVersion",
            "org.mybatis:mybatis-spring:$mybatisSpringVersion",
            "org.mybatis:mybatis:$mybatisVersion",
            "commons-dbcp:commons-dbcp:$dbcpVersion",
    )

    compileOnly("javax.servlet:javax.servlet-api:$servletVersion")
}

////////////////////////////////////////////////////////////////////////////////
//                                   动态替换                                  //
////////////////////////////////////////////////////////////////////////////////
def loadConfiguration() {
    // 获取 gradle 参数中 -Penv 的值: gradle -Penv=production clean build
    def environment = hasProperty('env') ? env : 'development'
    println "==> Using environment '" + environment + "'"

    def configFile = file('config.groovy') // 配置文件

    return new ConfigSlurper(environment).parse(configFile.toURI().toURL()).toProperties()
}

processResources {
    // src/main/resources 下的文件中 @key@ 的内容使用 config.groovy 里对应的进行替换
    from(sourceSets.main.resources.srcDirs) {
        filter(ReplaceTokens, tokens: loadConfiguration())
    }
}
