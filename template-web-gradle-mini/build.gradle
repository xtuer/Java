buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:2.0.0'
        classpath 'org.hidetake:gradle-ssh-plugin:2.9.0' // [1]
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'org.hidetake.ssh' // [2]

gretty {
    httpPort = 8080
    contextPath = ''
    servletContainer = 'tomcat8'

    inplaceMode  = 'hard'
    debugSuspend = false
    managedClassReload      = true
    recompileOnSourceChange = true
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

////////////////////////////////////////////////////////////////////////////////
//                                   Maven 依赖                               //
////////////////////////////////////////////////////////////////////////////////
repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    // 运行和打包的环境选择, 默认是开发环境
    // 获取 gradle 参数中 -Dprofile 的值: gradle -Denv=production clean build
    // 构建 gradle clean build
    //     gradle -Denv=production clean build
    // 部署 gradle deploy
    //     gradle -Denv=production deploy
    environment = System.getProperty("env", "development")
    war.archiveName = 'mini.war'
}

ext.versions = [
    spring   : '4.3.10.RELEASE',
    servlet  : '3.1.0',
    fastjson : '1.2.24',
    thymeleaf: '3.0.7.RELEASE',
    junit    : '4.12'
]

dependencies {
    compile(
            "org.springframework:spring-webmvc:$versions.spring", // Spring MVC
            "org.springframework:spring-context-support:$versions.spring",
            "com.alibaba:fastjson:$versions.fastjson",  // JSON
            "org.thymeleaf:thymeleaf:$versions.thymeleaf",
            "org.thymeleaf:thymeleaf-spring4:$versions.thymeleaf"
    )

    compileOnly("javax.servlet:javax.servlet-api:$versions.servlet")
    testCompile("org.springframework:spring-test:$versions.spring")
    testCompile("junit:junit:$versions.junit")
}

////////////////////////////////////////////////////////////////////////////////
//                                  资源动态替换                                //
////////////////////////////////////////////////////////////////////////////////
// [3]
def loadConfiguration() {
    println "==> Load configuration for '" + environment + "'"
    def configFile = file('config.groovy') // 配置文件
    return new ConfigSlurper(environment).parse(configFile.toURI().toURL()).toProperties()
}

processResources {
    // src/main/resources 下的文件中 @key@ 的内容使用 config.groovy 里对应的进行替换
    from(sourceSets.main.resources.srcDirs) {
        filter(ReplaceTokens, tokens: loadConfiguration())
    }
}

////////////////////////////////////////////////////////////////////////////////
//                                    Deploy                                  //
////////////////////////////////////////////////////////////////////////////////
remotes {
    webServer {
        host = '120.92.26.194'
        user = 'root'
        password = 'xxxx'
    }
}

task deploy {
    doLast {
        ssh.settings {
            knownHosts = allowAnyHosts
        }

        ssh.run {
            session(remotes.webServer) {
                put from: "${buildDir}/libs/${war.archiveName}", into: '/data/shitu.edu-edu.com'
                execute """
                    source /root/.bash_profile;
                    /usr/local/edu/tomcat/bin/shutdown.sh;
                    rm -rf /data/shitu.edu-edu.com/ROOT;
                    unzip  /data/shitu.edu-edu.com/${war.archiveName} -d /data/shitu.edu-edu.com/ROOT;
                    /usr/local/edu/tomcat/bin/startup.sh;
                    rm -rf /data/shitu.edu-edu.com/${war.archiveName}
                """
            }
        }
    }
}

deploy.dependsOn assemble
assemble.dependsOn clean
