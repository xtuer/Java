apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
    repositories { jcenter() }
    dependencies { classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0' }
}

////////////////////////////////////////////////////////////////////////////////
//                                [1] [2] 运行、打包                           //
////////////////////////////////////////////////////////////////////////////////
// [1.1] 从命令行运行默认类: gradle run
// [1.2] 从命令行运行某个类: gradle run -DmainClass=Foo
ext {
    project.mainClassName = System.getProperty("mainClass", "DefaultMainClass")
}

// [2] 打包: gradle clean shadowJar [-DmainClass=Foo]
shadowJar {
    mergeServiceFiles('META-INF/spring.*')
}

////////////////////////////////////////////////////////////////////////////////
//                                 [3] Maven 依赖                             //
////////////////////////////////////////////////////////////////////////////////
repositories {
    mavenCentral()
}

dependencies {
    compile 'org.springframework:spring-context-support:4.3.0.RELEASE'
    compile 'org.springframework:spring-jdbc:4.3.0.RELEASE'
    compile 'com.alibaba:druid:1.0.27'
    compile 'mysql:mysql-connector-java:5.1.21'
    compile 'org.mybatis:mybatis:3.2.1'
    compile 'org.mybatis:mybatis-spring:1.2.2'

    compile 'org.jsoup:jsoup:1.11.2'
    compile 'commons-io:commons-io:2.5'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.httpcomponents:httpclient:4.5.2'
    compile 'org.apache.httpcomponents:fluent-hc:4.5.2'
    compile 'org.apache.commons:commons-csv:1.5'
    compile 'com.alibaba:fastjson:1.2.41'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'org.yaml:snakeyaml:1.18'

    compileOnly 'org.projectlombok:lombok:1.16.18'
    testCompile 'junit:junit:4.12'
}

ext {
    // 运行和打包的环境选择, 默认是开发环境
    // 获取 gradle 参数中 env 的值: gradle -Denv=production clean build
    // 构建 gradle clean build
    //     gradle -Denv=production clean build
    environment = System.getProperty("env", "development")
}

////////////////////////////////////////////////////////////////////////////////
//                                  资源动态替换                                //
////////////////////////////////////////////////////////////////////////////////
processResources {
    // src/main/resources 下的文件中 @key@ 的内容使用 config.groovy 里对应的进行替换
    println "==> Load configuration for '${environment}'"
    def configFile = file('config.groovy') // 配置文件
    def props = new groovy.util.ConfigSlurper(environment).parse(configFile.toURI().toURL()).toProperties()

    from(sourceSets.main.resources.srcDirs) {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: props)
    }
}

////////////////////////////////////////////////////////////////////////////////
//                                    JVM                                     //
////////////////////////////////////////////////////////////////////////////////
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

// 创建目录结构的任务，执行后可删除
task createStructure {
    doLast {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
}

/*
生成的目录结构
├── build.gradle
└── src
    ├── main
    │   ├── java
    │   └── resources
    └── test
        ├── java
        └── resources
*/
