buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:1.4.2'
        classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'org.hidetake.ssh'

gretty {
    httpPort = 8080
    contextPath = ''
    servletContainer = 'tomcat7'
    serverConfigFile = 'server.xml'

    inplaceMode  = 'hard'
    debugSuspend = false
    managedClassReload      = true
    recompileOnSourceChange = false
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

////////////////////////////////////////////////////////////////////////////////
//                                   Maven 依赖                               //
////////////////////////////////////////////////////////////////////////////////
repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    // 运行和打包的环境选择, 默认是开发环境
    // 获取 gradle 参数中 -Dprofile 的值: gradle -Denv=production clean build
    // 构建 gradle clean build
    //     gradle -Denv=production clean build
    // 部署 gradle deploy
    //     gradle -Denv=production deploy
    //     gradle -Denv=production :web-admin:clean :web-admin:deploy
    environment = System.getProperty("env", "development")
    war.archiveName = 'paper-shitu.zip'
}

ext.versions = [
    spring        : '4.3.6.RELEASE',
    springSecurity: '4.2.1.RELEASE',
    springSession : '1.3.0.RELEASE',
    servlet       : '3.1.0',
    freemarker    : '2.3.23',
    lombok        : '1.16.14',
    fastjson      : '1.2.29',
    mysql         : '5.1.21',
    mybatis       : '3.4.4',
    mybatisSpring : '1.3.1',
    druid         : '1.0.29',
    validator     : '5.4.0.Final',
    commonsLang   : '3.5',
    commonsFileupload   : '1.3.2',
    commonsCsv    : '1.4',
    snakeyaml     : '1.18',
    poiScratchpad : '3.16',
    wmf2svg       : '0.9.8',
    logback       : '1.2.1',
    junit         : '4.12',
    jclOverSlf4j  : '1.7.21'
]

dependencies {
    compile(
            "org.springframework:spring-webmvc:$versions.spring",             // Spring MVC
            "org.springframework:spring-context-support:$versions.spring",
            "org.springframework.security:spring-security-web:$versions.springSecurity", // Spring Security
            "org.springframework.security:spring-security-config:$versions.springSecurity",
            "org.springframework.session:spring-session-data-redis:$versions.springSession",
            "org.freemarker:freemarker:$versions.freemarker",                 // Freemarker
            "org.projectlombok:lombok:$versions.lombok",                      // Getter, Setter generator
            "com.alibaba:fastjson:$versions.fastjson",                        // JSON
            "mysql:mysql-connector-java:$versions.mysql",                     // MyBatis
            "org.springframework:spring-jdbc:$versions.spring",
            "org.mybatis:mybatis-spring:$versions.mybatisSpring",
            "org.mybatis:mybatis:$versions.mybatis",
            "com.alibaba:druid:$versions.druid",
            "org.hibernate:hibernate-validator:$versions.validator",
            "org.apache.commons:commons-lang3:$versions.commonsLang",
            "commons-fileupload:commons-fileupload:$versions.commonsFileupload",
            "org.apache.commons:commons-csv:$versions.commonsCsv",
            "org.yaml:snakeyaml:$versions.snakeyaml",
            "org.apache.poi:poi-scratchpad:$versions.poiScratchpad",
            "net.arnx:wmf2svg:$versions.wmf2svg",
            "ch.qos.logback:logback-classic:$versions.logback",               // Logback
            "org.slf4j:jcl-over-slf4j:$versions.jclOverSlf4j"
    )

    compileOnly("javax.servlet:javax.servlet-api:$versions.servlet") // Servlet
    testCompile("org.springframework:spring-test:$versions.spring")
    testCompile("junit:junit:$versions.junit")
}

////////////////////////////////////////////////////////////////////////////////
//                                  资源动态替换                                //
////////////////////////////////////////////////////////////////////////////////
def loadConfiguration() {
    println "==> Load configuration for '" + environment + "'"
    def configFile = file('config.groovy') // 配置文件
    return new ConfigSlurper(environment).parse(configFile.toURI().toURL()).toProperties()
}

processResources {
    // src/main/resources 下的文件中 @key@ 的内容使用 config.groovy 里对应的进行替换
    from(sourceSets.main.resources.srcDirs) {
        filter(ReplaceTokens, tokens: loadConfiguration())
    }
}

////////////////////////////////////////////////////////////////////////////////
//                                    Deploy                                  //
////////////////////////////////////////////////////////////////////////////////
remotes {
    webServer {
        host = '120.92.26.194'
        user = 'root'
        password = 'Tiger_sun2017'
    }
}

task deploy {
    doLast {
        ssh.settings {
            knownHosts = allowAnyHosts
        }

        ssh.run {
            session(remotes.webServer) {
                put from: "${buildDir}/libs/${war.archiveName}", into: '/data/shitu.edu-edu.com'
                execute """
                    source /root/.bash_profile;
                    /usr/local/edu/tomcat/bin/shutdown.sh;
                    rm -rf /data/shitu.edu-edu.com/ROOT;
                    unzip -u /data/shitu.edu-edu.com/${war.archiveName} -d /data/shitu.edu-edu.com/ROOT;
                    kill `ps aux | grep -i tomcat | grep -v grep | awk '{print \$2}'`;
                    /usr/local/edu/tomcat/bin/startup.sh;
                    rm -rf /data/shitu.edu-edu.com/${war.archiveName}
                """
            }
        }
    }
}

deploy.dependsOn assemble
assemble.dependsOn clean
