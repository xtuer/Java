plugins {
    id 'war'
    id 'java'
    id 'org.hidetake.ssh' version '2.9.0'
    id 'org.akhikhl.gretty' version '2.0.0'
}

gretty {
    httpPort = 8080
    contextPath = ''
    servletContainer = 'tomcat8'

    inplaceMode  = 'hard'
    debugSuspend = false
    managedClassReload      = true
    recompileOnSourceChange = true
}

////////////////////////////////////////////////////////////////////////////////
//                                   Maven 依赖                               //
////////////////////////////////////////////////////////////////////////////////
repositories {
    mavenCentral()
}

ext {
    // 运行和打包的环境选择, 默认是开发环境
    // 获取 gradle 参数中 env 的值: gradle -Denv=production clean build
    // 构建 gradle clean build
    //     gradle -Denv=production clean build
    // 部署 gradle clean deploy
    //     gradle -Denv=production clean deploy
    environment = System.getProperty("env", "development")
    war.archiveName = 'ROOT.zip' // 打包的文件名
}

ext.versions = [
        spring        : '4.3.12.RELEASE',
        springSecurity: '4.1.0.RELEASE',
        servlet       : '3.1.0',
        jstl          : '1.2',
        freemarker    : '2.3.23',
        fastjson      : '1.2.41',
        logback       : '1.1.2',
        mysql         : '5.1.21',
        mybatis       : '3.2.1',
        mybatisSpring : '1.2.2',
        druid         : '1.1.5',
        lombok        : '1.16.18'
]

dependencies {
    compile(
            "javax.servlet:jstl:$versions.jstl",                              // JSTL
            "org.springframework:spring-webmvc:$versions.spring",             // Spring MVC
            "org.springframework:spring-context-support:$versions.spring",
            "org.springframework.security:spring-security-web:$versions.springSecurity", // Spring Security
            "org.springframework.security:spring-security-config:$versions.springSecurity",
            "org.freemarker:freemarker:$versions.freemarker",                 // Freemarker
            "com.alibaba:fastjson:$versions.fastjson", // JSON
            "ch.qos.logback:logback-classic:$versions.logback",               // Logback
            "org.slf4j:jcl-over-slf4j:1.7.7",
            "mysql:mysql-connector-java:$versions.mysql",                     // MyBatis
            "org.springframework:spring-jdbc:$versions.spring",
            "org.mybatis:mybatis-spring:$versions.mybatisSpring",
            "org.mybatis:mybatis:$versions.mybatis",
            "com.alibaba:druid:$versions.druid",
            "org.apache.commons:commons-lang3:3.4",
            "org.hibernate:hibernate-validator:5.1.3.Final"
    )

    compileOnly("org.projectlombok:lombok:$versions.lombok")
    compileOnly("javax.servlet:javax.servlet-api:$versions.servlet")
}

////////////////////////////////////////////////////////////////////////////////
//                                  资源动态替换                                //
////////////////////////////////////////////////////////////////////////////////
processResources {
    // src/main/resources 下的文件中 @key@ 的内容使用 config.groovy 里对应的进行替换
    println "==> Load configuration for '${environment}'"
    def configFile = file('config.groovy') // 配置文件
    def props = new ConfigSlurper(environment).parse(configFile.toURI().toURL()).toProperties()

    from(sourceSets.main.resources.srcDirs) {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: props)
    }
}

////////////////////////////////////////////////////////////////////////////////
//                                   项目部署                                  //
////////////////////////////////////////////////////////////////////////////////
remotes {
    server {
        host = '192.168.82.100'
        user = 'root'
        // password = 'xxx'
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
    }
}

ssh.settings {
    knownHosts = allowAnyHosts
}

task deploy(dependsOn: war) {
    def targetDir = '/data/xtuer.com'
    doLast {
        ssh.run {
            session(remotes.server) {
                put from: "${buildDir}/libs/${war.archiveName}", into: "${targetDir}"
                execute """
                    source /root/.bash_profile;
                    /usr/local/tomcat/bin/shutdown.sh;
                    rm -rf ${targetDir}/ROOT;
                    unzip -u ${targetDir}/${war.archiveName} -d ${targetDir}/ROOT > /dev/null;
                    /usr/local/tomcat/bin/startup.sh;
                    rm -rf ${targetDir}/${war.archiveName};
                """
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////
//                                    JVM                                     //
////////////////////////////////////////////////////////////////////////////////
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

