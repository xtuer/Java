<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 非常重要：必须是 Mapper 类的全路径 -->
<mapper namespace="com.exam.mapper.exam.QuestionMapper">
    <!-- 题目的列 -->
    <sql id="question_columns">
        q.id AS question_id, q.stem AS question_stem, q.key AS question_key, q.analysis AS question_analysis,
        q.type AS question_type, q.difficulty AS question_difficulty, q.position AS question_position,
        q.purpose AS question_purpose, q.parent_id AS question_parent_id, q.options_json AS question_options_json
    </sql>

    <!-- 查找指定 ID 的题目 (如有小题，同时查出) -->
    <select id="findQuestionById" parameterType="long" resultMap="QuestionResultMap">
        (
            SELECT <include refid="question_columns"/>
            FROM exam_question q
            WHERE q.id = #{questionId}
            ORDER BY q.position
        )

        UNION ALL

        (
            SELECT <include refid="question_columns"/>
            FROM exam_question q
            WHERE q.parent_id = #{questionId}
            ORDER BY q.position
        )
    </select>

    <!-- 插入或者更新题目 -->
    <insert id="upsertQuestion" parameterType="Question">
        INSERT INTO exam_question (id, stem, `key`, analysis, type, difficulty, position, purpose, parent_id, options_json)
        VALUES (#{id}, #{stem}, #{key}, #{analysis}, #{type}, #{difficulty}, #{position}, #{purpose}, #{parentId}, #{optionsJson})

        ON DUPLICATE KEY
        UPDATE stem = #{stem}, `key` = #{key}, analysis = #{analysis}, type = #{type},
               difficulty = #{difficulty}, position = #{position}, purpose = #{purpose}, parent_id = #{parentId}, options_json = #{optionsJson}
    </insert>

    <!-- 删除题目，同时会删除题目、题目的小题 -->
    <delete id="deleteQuestion" parameterType="long">
        DELETE FROM exam_question WHERE id = #{questionId};
        DELETE FROM exam_question WHERE parent_id = #{questionId};
    </delete>

    <!--
        查找试卷的题目:
        查询条件: 在试卷的题目表中找到试卷 paperId 的所有题目，然后和题目表、题目选项表进行左连接
        排序顺序: 题型 group_sn、在试卷中的位置、小题的位置、选项的位置
    -->
    <select id="findPaperQuestions" parameterType="long" resultMap="QuestionResultMap">
        SELECT
            pq.paper_id    AS paper_id,
            pq.group_sn    AS paper_question_group_sn,
            pq.position    AS paper_question_position,
            pq.score       AS paper_question_score,
            pq.total_score AS paper_question_total_score,
            pq.sn_label    AS paper_question_sn_label,
            <include refid="question_columns"/>
        FROM exam_paper_question pq
            LEFT JOIN exam_question q ON q.id = pq.question_id
        WHERE pq.paper_id = #{paperId}
        ORDER BY paper_question_group_sn, paper_question_position, question_position
    </select>

    <!-- 题目: 包含选项 -->
    <resultMap id="QuestionResultMap" type="Question">
        <id property="id" column="question_id"/>
        <result property="stem"        column="question_stem"/>
        <result property="key"         column="question_key"/>
        <result property="analysis"    column="question_analysis"/>
        <result property="type"        column="question_type"/>
        <result property="difficulty"  column="question_difficulty"/>
        <result property="position"    column="question_position"/>
        <result property="purpose"     column="question_purpose"/>
        <result property="parentId"    column="question_parent_id"/>
        <result property="optionsJson" column="question_options_json"/>

        <!-- 试卷相关属性  -->
        <result property="paperId"         column="paper_id"/>
        <result property="groupSn"         column="paper_question_group_sn"/>
        <result property="positionInPaper" column="paper_question_position"/>
        <result property="score"           column="paper_question_score"/>
        <result property="totalScore"      column="paper_question_total_score"/>
        <result property="snLabel"         column="paper_question_sn_label"/>
    </resultMap>
</mapper>
