<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 非常重要：必须是 Mapper 类的全路径 -->
<mapper namespace="com.exam.mapper.exam.ExamMapper">
    <!-- 考试的列 -->
    <sql id="exam_columns">
        id, paper_ids, holder_id, title, start_time, end_time, duration, max_times, highest_score, lowest_score, average_score, pass_rate
    </sql>

    <!-- 考试记录的列 -->
    <sql id="record_columns">
        id, user_id, exam_id, paper_id, status, elapsed_time, score, submitted_time
    </sql>

    <!--=============================================================================================
                                                  考试
    ==============================================================================================-->
    <!-- 使用 ID 查找考试 -->
    <select id="findExamById" resultType="Exam">
        SELECT <include refid="exam_columns"/> FROM exam WHERE id = #{examId}
    </select>

    <!-- 查找当前机构下的考试 -->
    <select id="findExamsByOrgId" resultType="Exam">
        SELECT <include refid="exam_columns"/> FROM exam WHERE holder_id = #{orgId}
    </select>

    <!-- 创建或更新考试 -->
    <insert id="upsertExam" parameterType="Exam">
        INSERT INTO exam (id, paper_ids, holder_id, title, start_time, end_time, duration, max_times)
        VALUES (#{id}, #{paperIds}, #{holderId}, #{title}, #{startTime}, #{endTime}, #{duration}, #{maxTimes})

        ON DUPLICATE KEY
        UPDATE paper_ids = #{paperIds}, holder_id = #{holderId}, title = #{title},
               start_time = #{startTime}, end_time = #{endTime}, duration = #{duration}, max_times = #{maxTimes}
    </insert>

    <!--=============================================================================================
                                                考试记录
    ==============================================================================================-->
    <!-- 查找用户的考试记录 -->
    <select id="findExamRecordById" resultType="ExamRecord">
        SELECT <include refid="record_columns"/>
        FROM exam_record
        WHERE id = #{examRecordId}
    </select>

    <!-- 查找用户的指定考试的所有考试记录 -->
    <select id="findExamRecordsByUserIdAndExamId" resultType="ExamRecord">
        SELECT <include refid="record_columns"/>
        FROM exam_record
        WHERE user_id = #{userId} AND exam_id = #{examId}
        ORDER BY created_at
    </select>

    <!-- 统计用户某次考试的考试记录数量 -->
    <select id="countExamRecordsByUserIdAndExamId" resultType="int">
        SELECT count(1)
        FROM exam_record
        WHERE user_id = #{userId} AND exam_id = #{examId}
    </select>

    <!-- 查找指定考试记录所有题目选项的回答 -->
    <select id="findQuestionOptionAnswersByExamRecordId" resultType="QuestionForAnswer">
        SELECT exam_record_id, question_id, question_option_id, content
        FROM exam_question_option_answer
        WHERE exam_record_id = #{examRecordId}
    </select>

    <!-- 创建考试记录 -->
    <insert id="insertExamRecord">
        INSERT INTO exam_record (id, user_id, exam_id, paper_id)
        VALUES (#{id}, #{userId}, #{examId}, #{paperId})
    </insert>

    <!-- 查找用户在某次考试中已经做过的试卷 -->
    <select id="findPaperIdsByUserIdAndExamId" resultType="long">
        SELECT distinct(paper_id) FROM exam_record WHERE user_id = #{userId} AND exam_id = #{examId};
    </select>

    <!-- 更新考试记录的状态:
         考试记录的状态值变化设计为只会递增
    -->
    <update id="updateExamRecordStatus">
    <![CDATA[
        UPDATE exam_record
        SET status = ${status}
        WHERE id = ${examRecordId} AND status < ${status}
    ]]>
    </update>

    <!-- 增加考试记录的使用时间:
         和上一次更新时间比较，如果小于 timeInSeconds-5 则不更新, 5秒是误差，可调节
    -->
    <update id="increaseExamRecordElapsedTime">
    <![CDATA[
        UPDATE exam_record
        SET elapsed_time = elapsed_time+${timeInSeconds}, tick_at = now()
        WHERE id = ${examRecordId} AND (UNIX_TIMESTAMP(tick_at)+${timeInSeconds}-5) < UNIX_TIMESTAMP(now())
    ]]>
    </update>

    <!-- 插入题目的回答 -->
    <insert id="insertQuestionOptionAnswer" parameterType="QuestionForAnswer">
        INSERT INTO exam_question_option_answer (exam_id, exam_record_id, question_id, question_option_id, content)
        VALUES (#{examId}, #{examRecordId}, #{questionId}, #{questionOptionId}, #{content})
    </insert>

    <!-- 删除指定的考试记录里指定题目的所有回答 -->
    <delete id="deleteQuestionOptionAnswersByExamRecordIdAndQuestionId">
        DELETE FROM exam_question_option_answer
        WHERE exam_record_id = #{examRecordId} AND question_id = #{questionId}
    </delete>

    <!-- 插入或者更新题目的作答结果 -->
    <insert id="upsertQuestionResult">
        INSERT INTO exam_question_result (exam_record_id, question_id, score, status)
        VALUES (#{examRecordId}, #{questionId}, #{score}, #{status})

        ON DUPLICATE KEY
        UPDATE score = #{score}, status = #{status}
    </insert>

    <!-- 查询考试记录中题目的得分 -->
    <select id="findQuestionResultByExamRecordId" resultType="QuestionResult">
        SELECT exam_record_id, question_id, score, status
        FROM exam_question_result
        WHERE exam_record_id = #{examRecordId}
    </select>
</mapper>
